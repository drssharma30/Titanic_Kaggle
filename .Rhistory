setwd("C:/Users/ssharma/Desktop/Kaggle/Titanic")
titanic.train<- read.csv(file = "train.csv", stringsAsFactors = FALSE, header = TRUE)
titanic.test<- read.csv(file = "test.csv",stringsAsFactors = FALSE, header = TRUE)
#Trying to find which varibles are best predictors for Survived.
table(titanic.train[,c("Survived", "Embarked")])
table(titanic.train[,c("Survived", "Pclass")])
table(titanic.train[,c("Survived","Sex")])
table(titanic.train[,c("Survived", "SibSp")])
install.packages("fields")
library("fields")
bplot.xy(titanic.train$Survived,titanic.train$Age)
bplot.xy(titanic.train$Survived,titanic.train$Fare)
#Creating a new coulmn in train and test set to identify them before combining these data sets.
titanic.train$IsTrainSet<- TRUE
titanic.test$IsTrainSet<- FALSE
# creating a coulmn named survived in test dataset with all the values as NA.
titanic.test$Survived<- NA
#combining train and test datasets
titanic.full<- rbind(titanic.train, titanic.test)
# Cleaning the data
titanic.full[titanic.full$Embarked =="", "Embarked"]<- "S"
#Trying to find which varibles are best predictors for Survived.
table(titanic.full[,c("Survived", "Embarked")])
table(titanic.full[,c("Survived", "Pclass")])
table(titanic.full[,c("Survived","Sex")])
table(titanic.full[,c("Survived", "SibSp")])
#Cleaning the data
titanic.full[titanic.full$Embarked=="","Embarked"]<- "S"
upper.fixer<- boxplot.stats(titanic.full$Fare)$stats[5]
outlier.filter<- titanic.full$Fare < upper.fixer
titanic.full[outlier.filter,]
fare.equation = "Fare ~ Parch + Embarked + Sex + SibSp + Pclass + Age"
fare.model<- lm(
formula = fare.equation,
data= titanic.full[outlier.filter,]
)
fare.row<- titanic.full[is.na(titanic.full$Fare), c("Parch", "Age", "Pclass", "Sex", "SibSp","Embarked")]
fare.predictions<- predict(fare.model, newdata = fare.row)
titanic.full[is.na(titanic.full$Fare),"Fare"] <- fare.predictions
install.packages("fields")
titanic.full[is.na(titanic.full$Age),"Age"]
boxplot(titanic.full$Age)
boxplot.stats(titanic.full$Age)$stats[5]
upperwhixer_age<- boxplot.stats(titanic.full$Age)$stats[5]
outlierfilter_age<- titanic.full$Age< upperwhixer_age
age.equation<- "Age~ Parch+ Embarked +Sex + SibSp + Pclass + Fare"
lm(formula = age.equation, data= titanic.full[outlierfilter_age,])
age.model<- lm(formula = age.equation, data= titanic.full[outlierfilter_age,])
age.row <- titanic.full[is.na(titanic.full$Age),c("Parch", "Fare", "Pclass","Sex","SibSp", "Embarked")]
age.predictions<- predict(age.model, newdata = age.row)
age.predictions
titanic.full[is.na(titanic.full$Age),"Age"]<- age.predictions
titanic.full[1302]
titanic.full[1159]
titanic.full[1043]
titanic.full[1043,]
bplot.xy(titanic.full$Survived, titanic.full$Age)
titanic.train<- titanic.full[titanic.full$IsTrainSet==TRUE]
titanic.test<- titanic.full[titanic.full$IsTrainSet==FALSE]
titanic.train<- titanic.full[titanic.full$IsTrainSet==TRUE,]
titanic.test<- titanic.full[titanic.full$IsTrainSet==FALSE,]
setwd("C:/Users/ssharma/Desktop/Kaggle/Titanic")
titanic.train<- read.csv(file = "train.csv", stringsAsFactors = FALSE, header = TRUE)
titanic.test<- read.csv(file = "test.csv",stringsAsFactors = FALSE, header = TRUE)
#Creating a new coulmn in train and test set to identify them before combining these data sets.
titanic.train$IsTrainSet<- TRUE
titanic.test$IsTrainSet<- FALSE
# creating a coulmn named survived in test dataset with all the values as NA.
titanic.test$Survived<- NA
#combining train and test datasets
titanic.full<- rbind(titanic.train, titanic.test)
# Cleaning the data
# Cleaning the missing values in "Embarked"
titanic.full[titanic.full$Embarked=="","Embarked"]<- "S"
# Cleaning the missing values in "Fare"
upper.fixer<- boxplot.stats(titanic.full$Fare)$stats[5]
outlier.filter<- titanic.full$Fare < upper.fixer
titanic.full[outlier.filter,]
fare.equation = "Fare ~ Parch + Embarked + Sex + SibSp + Pclass + Age"
fare.model<- lm(
formula = fare.equation,
data= titanic.full[outlier.filter,]
)
fare.row<- titanic.full[is.na(titanic.full$Fare), c("Parch", "Age", "Pclass", "Sex", "SibSp","Embarked")]
fare.predictions<- predict(fare.model, newdata = fare.row)
titanic.full[is.na(titanic.full$Fare),"Fare"] <- fare.predictions
#Cleaning the missing values in "Age"
titanic.full[is.na(titanic.full$Age),"Age"]
boxplot(titanic.full$Age)
boxplot.stats(titanic.full$Age)$stats[5]
upperwhixer_age<- boxplot.stats(titanic.full$Age)$stats[5]
outlierfilter_age<- titanic.full$Age< upperwhixer_age
age.equation<- "Age~ Parch+ Embarked +Sex + SibSp + Pclass + Fare"
lm(formula = age.equation, data= titanic.full[outlierfilter_age,])
age.model<- lm(formula = age.equation, data= titanic.full[outlierfilter_age,])
age.row <- titanic.full[is.na(titanic.full$Age),c("Parch", "Fare", "Pclass","Sex","SibSp", "Embarked")]
age.predictions<- predict(age.model, newdata = age.row)
age.predictions
titanic.full[is.na(titanic.full$Age),"Age"]<- age.predictions
summary(titanic.full)
sapply(titanic.full,class)
titanic.full<- transform(titanic.full,
Pclass= as.factor(Pclass),
Sex=as.factor(Sex),
Embarked=as.factor(Embarked),
)
titanic.full<- transform(titanic.full,
Pclass= as.factor(Pclass),
Sex=as.factor(Sex),
Embarked=as.factor(Embarked)
)
sapply(titanic.full, class)
titanic.train<- titanic.full[titanic.full$IsTrainSet==TRUE,]
titanic.test<- titanic.full[titanic.full$IsTrainSet==FALSE,]
titanic.train$Survived<- as.factor(titanic.train$Survived)
#Set a random seed
set.seed(1984)
# Training using "random forest" algorithm,
model<- train(Survived~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data= titanic.train, method= 'rf',
trControl= trainControl(method = 'cv', number = 5))
model
summary(titanic.test)
set.seed(1984)
# Training using "random forest" algorithm,
titanic.model<- train(Survived~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data= titanic.train, method= 'rf',
trControl= trainControl(method = 'cv', number = 5))
titanic.model
Survived<- predict(titanic.model, newdata = titanic.test)
Survived
PassengerId <- titanic.test$PassengerId
output.df <- as.data.frame(PassengerId)
output.df$Survived <- Survived
tail(output.df)
head(output.df)
write.csv(output.df, file = "kaggle_submission.csv", row.names = FALSE)
